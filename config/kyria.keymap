/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define MATH    1
#define SYMBOLS 2
#define NAV     3
#define UTIL    4
#define MACROS  5

&sl {
  release-after-ms = <5000>;
};

/ {
  keymap {
    compatible = "zmk,keymap";

    default_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
// |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | L SHIFT | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
//                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |
      bindings = <
        &lt NAV TAB     &kp Q &kp W &kp E    &kp R    &kp T                                                               &kp Y    &kp U       &kp I     &kp O    &kp P    &kp BSLH
        &kp LCTL        &kp A &kp S &kp D    &kp F    &kp G                                                               &kp H    &kp J       &kp K     &kp L    &kp SEMI &kp SQT
        &mt LSHIFT LPAR &kp Z &kp X &kp C    &kp V    &kp B    &mt LCTL LBKT &lt NAV ESC    &lt SYMBOLS TAB &mt RCTL RBKT &kp N    &kp M       &kp COMMA &kp DOT  &kp FSLH &mt RSHIFT RPAR
                                    &kp C_PP &kp LALT &kp LGUI &kp SPACE     &mo SYMBOLS    &mo NAV         &kp RET       &kp BSPC &sl SYMBOLS &kp C_MUTE
      >;

      sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
    };

    // Math
    numpad_layer {
      bindings = <
        &to DEFAULT  &none &none &none &none  &none                                    &none        &kp KP_N7 &kp KP_N8 &kp KP_N9 &none &none
        &trans       &none &none &none &none  &none                                    &none        &kp KP_N4 &kp KP_N5 &kp KP_N6 &none &none
        &trans       &none &none &none &none  &none  &trans &trans       &trans &trans &none        &kp KP_N1 &kp KP_N2 &kp KP_N3 &none &trans
                                 &none &trans &trans &trans &none        &none  &trans &kp KP_ENTER &kp KP_N0 &kp KP_DOT
      >;
    };

    // Symbols
    symbol_layer {
      bindings = <
        &none  &kp N1 &kp N2  &kp N3  &kp N4  &kp N5                                          &kp N6  &kp N7    &kp N8    &kp N9   &kp N0   &none
        &trans &kp F1 &kp F2  &kp F3  &kp F4  &kp F5                                          &kp F6  &kp MINUS &kp EQUAL &kp LBKT &kp RBKT &kp DOT
        &trans &kp F7 &kp F8  &kp F9  &kp F10 &kp F11 &trans &trans         &trans    &trans  &kp F12 &kp UNDER &kp PLUS  &kp DOT  &none    &trans
                              &none   &trans  &trans  &trans &kp TILDE      &kp GRAVE &trans  &trans  &trans    &none
      >;
    };

    // Navigation
    nav_layer {
      /* XXXXXXX, XXXXXXX, KC_BTN2, KC_BTN1, KC_DEL,  KC_BSPC,                                     KC_MS_L, KC_MS_D, KC_MS_U, KC_MS_R, XXXXXXX, XXXXXXX, */
      /* _______, XXXXXXX, XXXXXXX, XXXXXXX, KC_ENT,  XXXXXXX,                                     KC_LEFT, KC_DOWN, KC_UP,   KC_RGHT, XXXXXXX, XXXXXXX, */
      /* _______, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, _______, _______, _______, _______, KC_HOME, KC_PGDN, KC_PGUP, KC_END,  XXXXXXX, _______, */
      /*                            KC_PGUP, _______, _______, _______, XXXXXXX, XXXXXXX, _______, _______, _______, KC_PGDN */
      // Mouse support is missing from the above one (QMK format).
      bindings = <
        &none  &none &none &none     &kp DEL &kc BSPC                                &none    &none     &none     &none    &none &none
        &trans &none &none &none     &kp RET &none                                   &kp LEFT &kp DOWN  &kp UP    &kp RGHT &none &none
        &trans &none &none &none     &none   &none  &trans &trans      &trans &trans &kp HOME &kp PG_DN &kp PG_UP &kp END  &none &trans
                           &kp PG_UP &trans  &trans &trans &none       &none  &trans &trans   &trans    &kp PG_DN
      >;
    };

    // Utils
    utils_layer {
        /* &none &none           &none           &none           &none           &none                                        &none    &kp C_MUTE &kp C_VOL_UP &none      &none &none */
        /* &none &rgb_ug RGB_TOG &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_EFF                              &none    &kp C_PREV &kp C_PP     &kp C_NEXT &none &none */
        /* &none &none           &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFR &none &none      &none &none &to MATH &none      &kp C_VOL_DN &none      &none &none */
        /*                                               &none       &none       &none           &none &none      &none &none &none    &none      &none */
      bindings = <
        &none &none &none &none &none &none                              &none    &kp C_MUTE &kp C_VOL_UP &none      &none &none
        &none &none &none &none &none &none                              &none    &kp C_PREV &kp C_PP     &kp C_NEXT &none &none
        &none &none &none &none &none &none &none &none      &none &none &to MATH &none      &kp C_VOL_DN &none      &none &none
                          &none &none &none &none &none      &none &none &none    &none      &none
      >;
    };

    // Macros
    macros_layer {
      bindings = <
        &none &none &none &none &kp LG(LS(N4)) &kp LG(LS(N5))                      &none        &none        &none        &bt BT_CLR   &bt BT_NXT &bt BT_PRV
        &none &none &none &none &none          &none                               &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &none      &none
        &none &none &none &none &none          &none &none &none       &none &none &none        &none        &none        &none        &none      &none
                          &none &none          &none &none &none       &none &none &none        &none        &none
      >;
    };
  };
/*
// Home row mods information: https://precondition.github.io/home-row-mods
// Left-hand home row mods
#define GUI_A LGUI_T(KC_A)
#define ALT_S LALT_T(KC_S)
#define SFT_D LSFT_T(KC_D)
#define CTL_F LCTL_T(KC_F)

// Right-hand home row mods
#define CTL_J RCTL_T(KC_J)
#define SFT_K RSFT_T(KC_K)
#define ALT_L LALT_T(KC_L)
#define GUI_SCLN RGUI_T(KC_SCLN)

// Thumb cluster mods
#define TC_SPACE LT(1, KC_SPC)
// Spacecadet Ctrl/[]
#define TC_LCBO LCTL_T(KC_LBRC)
#define TC_RCBC RCTL_T(KC_RBRC)
#define TC_NESC LT(NAV, KC_ESC)
#define TC_STAB LT(SYMBOLS,KC_TAB)

// Layer swaps
#define LT_NATA LT(NAV, KC_TAB)
#define MO_SYM  MO(SYMBOLS)
#define MO_NAV  MO(NAV)
#define OSL_MAC OSL(MACROS)
#define DF_DEF  DF(DEFAULT)

// Macros
#define M_SS G(S(KC_4))
#define M_SC G(S(KC_5))

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
  [DEFAULT] = LAYOUT(
    LT_NATA, KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,                                            KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_BSLS,
    KC_LCTL, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,                                            KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,
    KC_LSPO, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    TC_LCBO, TC_NESC,     TC_STAB, TC_RCBC, KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH, KC_RSPC,
                               KC_MPLY, KC_LALT, KC_LGUI, KC_SPC,  MO_SYM,      MO_NAV,  KC_ENT,  KC_BSPC, OSL_MAC, KC_MUTE
  ),
  [MATH] = LAYOUT(
    DF_DEF,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,                                     XXXXXXX, KC_KP_7, KC_KP_8, KC_KP_9, XXXXXXX, XXXXXXX,
    _______, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,                                     XXXXXXX, KC_KP_4, KC_KP_5, KC_KP_6, XXXXXXX, XXXXXXX,
    _______, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, _______, _______, _______, _______, XXXXXXX, KC_KP_1, KC_KP_2, KC_KP_3, XXXXXXX, _______,
                               XXXXXXX, _______, _______, _______, XXXXXXX, XXXXXXX, _______, KC_PENT, KC_KP_0, KC_PDOT
  ),
  [SYMBOLS] = LAYOUT(
    XXXXXXX, KC_1,    KC_2,    KC_3,    KC_4,    KC_5,                                        KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    XXXXXXX,
    _______, KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,                                       KC_F6,   KC_MINS, KC_EQL,  KC_LBRC, KC_RBRC, KC_DOT,
    _______, KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  _______, _______, _______, _______, KC_F12,  KC_UNDS, KC_PLUS, KC_DOT,  XXXXXXX, _______,
                               XXXXXXX, _______, _______, _______, KC_TILD, KC_GRV,  _______, _______, _______, XXXXXXX
  ),
  [NAV] = LAYOUT(
    XXXXXXX, XXXXXXX, KC_BTN2, KC_BTN1, KC_DEL,  KC_BSPC,                                     KC_MS_L, KC_MS_D, KC_MS_U, KC_MS_R, XXXXXXX, XXXXXXX,
    _______, XXXXXXX, XXXXXXX, XXXXXXX, KC_ENT,  XXXXXXX,                                     KC_LEFT, KC_DOWN, KC_UP,   KC_RGHT, XXXXXXX, XXXXXXX,
    _______, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, _______, _______, _______, _______, KC_HOME, KC_PGDN, KC_PGUP, KC_END,  XXXXXXX, _______,
                               KC_PGUP, _______, _______, _______, XXXXXXX, XXXXXXX, _______, _______, _______, KC_PGDN
  ),
  [UTIL] = LAYOUT(
    XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,                                      XXXXXXX,  KC_MUTE, KC_VOLU, XXXXXXX, XXXXXXX, RESET,
    XXXXXXX, RGB_TOG, RGB_SAI, RGB_HUI, RGB_VAI, RGB_MOD,                                      XXXXXXX,  KC_MPRV, KC_MPLY, KC_MNXT, XXXXXXX, XXXXXXX,
    XXXXXXX, XXXXXXX, RGB_SAD, RGB_HUD, RGB_VAD, RGB_RMOD, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, DF(MATH), XXXXXXX, KC_VOLD, XXXXXXX, XXXXXXX, XXXXXXX,
                               XXXXXXX, XXXXXXX, XXXXXXX,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,  XXXXXXX, XXXXXXX
  ),
  [MACROS] = LAYOUT(
    XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, M_SS,    M_SC,                                        XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
    XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,                                     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
    XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
                               XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX
  )
};

 */
};
